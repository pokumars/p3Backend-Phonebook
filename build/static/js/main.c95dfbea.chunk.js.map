{"version":3,"sources":["components/Filter.js","components/PersonForm.js","components/Persons.js","services/phoneService.js","components/Notification.js","components/Error.js","App.js","index.js"],"names":["Filter","props","filter","handleChange","react_default","a","createElement","value","onChange","PersonForm","submitter","newName","handleNameChange","newNumber","handleNumberChange","onSubmit","type","Persons","persons","deletePerson","item","name","toLowerCase","includes","map","person","key","number","onClick","baseUrl","phoneService","personObj","axios","post","then","response","data","get","id","delete","concat","console","log","newObject","put","Notification","_ref","message","className","Error","App","_useState","useState","_useState2","Object","slicedToArray","setPersons","_useState3","_useState4","setFilter","_useState5","_useState6","setNewName","_useState7","_useState8","setNewNumber","_useState9","_useState10","notificationMessage","setnotificationMessage","_useState11","_useState12","errorMessage","setErrorMessage","useEffect","allContacts","displayNotification","msg","good","setTimeout","components_Notification","components_Error","components_Filter","event","target","components_PersonForm","preventDefault","nameObj","nameExistsAlready","find","object","window","alert","undefined","newPerson","catch","error","confirm","objToUpdateID","p","returnedPerson","err","components_Persons","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.c95dfbea.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Filter = (props) => {\r\n    const { filter, handleChange} = props;\r\n    \r\n\r\n    return (\r\n        <div>\r\n            filter by this text <input value={filter} onChange={handleChange}/>\r\n        </div>\r\n    )\r\n}\r\nexport default Filter","import React from 'react'\r\n\r\nconst PersonForm = (props) => {\r\n    const {submitter, newName, handleNameChange, newNumber, handleNumberChange} = props\r\n    return (\r\n        <form onSubmit={submitter}>\r\n            <div>\r\n                name: <input  value= {newName}\r\n                onChange={handleNameChange}/>\r\n            </div>\r\n\r\n            <div>\r\n                number: <input value={newNumber} type=\"number\"\r\n                onChange={handleNumberChange}/>\r\n            </div>\r\n\r\n            <div>\r\n                <button type=\"submit\">add</button>\r\n            </div>\r\n        </form>\r\n\r\n    )\r\n}\r\nexport default PersonForm","import React from 'react'\r\n\r\nconst Persons = (props) => {\r\n    const { persons, filter, deletePerson } = props\r\n\r\n\r\n    const displayNumbers =() => {\r\n        function filterByName(item) {\r\n          return item.name.toLowerCase().includes(filter);\r\n        }\r\n    \r\n        if(filter !== \"\"){\r\n          let filteredPersons = persons.filter(filterByName);\r\n          return filteredPersons.map((person)=>  <p key={person.name}>{person.name} {person.number} <button onClick={()=> deletePerson(person)}>delete</button></p>)\r\n        } \r\n        return persons.map((person)=> <p key={person.name}>{person.name} {person.number} <button onClick={()=> deletePerson(person)}>delete</button></p>)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {displayNumbers()}\r\n        </div>\r\n    )\r\n}\r\nexport default Persons","import axios from 'axios';\r\n//const baseUrl = 'http://localhost:3001/persons';\r\n//const baseUrl = 'http://localhost:3001/api/persons';\r\nconst baseUrl = '/api/persons';\r\n\r\n\r\n//Get all contacts\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl);\r\n\r\n    return request.then((response) => response.data);\r\n}\r\n\r\nconst addContact = (personObj) => {\r\n    const request = axios.post(baseUrl, personObj);\r\n\r\n    return request.then((response) => response.data);\r\n}\r\n\r\nconst deleteContact = (id) => {\r\n    const request = axios.delete(`${baseUrl}/${id}`);\r\n\r\n\r\n    return request.then((response)=>{\r\n        console.log('delete request response ',response.data);\r\n    });\r\n}\r\n\r\nconst updateContact = (id, newObject) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, newObject);\r\n\r\n    return request.then((response) => {\r\n        console.log('update contact response ',response.data);\r\n        return response.data\r\n    });\r\n\r\n}\r\n\r\nexport default { addContact, getAll, deleteContact,updateContact }\r\n","import React from 'react';\r\n\r\nconst Notification = ({ message }) => {\r\n    if(message === null){\r\n        return null;\r\n    }\r\n\r\n    return(\r\n        <div className=\"successMessage\">\r\n            {message}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Notification;","import React from 'react';\r\n\r\nconst Error = ({ message }) => {\r\n    if (message === null) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <div className=\"errorMessage\">\r\n            {message}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Error;","import React, { useState, useEffect } from 'react';\nimport Filter from './components/Filter';\nimport PersonForm from './components/PersonForm';\nimport Persons from './components/Persons';\nimport phoneService from './services/phoneService';\nimport Notification from './components/Notification';\nimport Error from './components/Error';\n\n\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [ filter, setFilter] = useState('');\n  const [ newName, setNewName ] = useState('');\n  const [ newNumber, setNewNumber ] = useState('');\n  const [ notificationMessage, setnotificationMessage] = useState(null);\n  const [ errorMessage, setErrorMessage ] = useState(null);\n\n  const getAllhook = () => {\n   phoneService\n    .getAll()\n    .then((allContacts) => {\n      setPersons(allContacts);\n    });\n  }\n  //use effect hook here to fetch notes\n  useEffect(getAllhook, []);\n\n\n  const handleNameChange =(event) => {\n    //console.log(event.target.value);\n    setNewName(event.target.value);\n    console.log(newName);\n  }\n\n  const handleNumberChange = (event) =>{\n    console.log(event.target.value);\n    setNewNumber(event.target.value)\n  }\n\n  const handleFilterChange= (event) => {\n    setFilter(event.target.value);\n}\n\n\n\n  const addContact= (event) => {\n    event.preventDefault();\n\n    const nameObj = { name: newName, number: newNumber };\n\n    const nameExistsAlready = () => {\n      //if name isnt found, it returns undefined,\n      //if it is found then it returns that obj\n      return persons.find( (object) => object.name === nameObj.name);\n    }\n    console.log('getting undefined means name doesnt exist yet --->', nameExistsAlready());\n\n   \n\n    if(newName === \"\") {//no name\n      return window.alert(`Name spot is empty`)\n    } else if (newNumber === \"\"){//no number\n      return window.alert(`Number spot is empty`)\n    } else if(nameExistsAlready() !== undefined) {//name exists\n      //undefine means name doesnt exist already\n      //return window.alert(`Name ${nameObj.name} already exists in phonebook or number spot is empty`)\n      const agree = window.confirm(`${newName} already exists. Do you want to update the number`);\n\n      if (agree) {\n        const objToUpdateID = persons.find((p)=> newName === p.name).id;\n        console.log('objToUpudate', objToUpdateID);\n      \n        //UPDATE Person\n        phoneService\n          .updateContact(objToUpdateID, nameObj)\n          .then((returnedPerson) => {\n            displayNotification(`${returnedPerson.name}'s new number ${returnedPerson.number} added successfully`, true);\n            //setPersons to be all the persons except the one with the id we just changed.\n          //That should be replaced by the updated one we got from the put request's response.\n            return setPersons(persons.map((p) => p.id !== objToUpdateID? p : returnedPerson));\n          }).catch((err) => {\n            displayNotification(`${newName} has already been removed from server or the number belongs to someone else`, false)\n          })\n\n          /*\n          //after Ex3.17* this is how I update. The backend handles whether it's new person or update with mongo's findOneAndUpdate\n          phoneService\n          .addContact(nameObj)\n          .then((returnedPerson) => {\n            displayNotification(`${returnedPerson.name}'s new number ${returnedPerson.number} added successfully`, true);\n            setNewName('');\n            setNewNumber('');\n            //setPersons to be all the persons except the one with the id we just changed.\n          //That should be replaced by the updated one we got from the put request's response.\n            return setPersons(persons.map((p) => p.id !== objToUpdateID? p : returnedPerson));\n          })\n          */\n      }\n      \n      return\n    }\n\n    //CREATE CONTACT\n    console.log('name to add' , nameObj);\n\n    phoneService\n      .addContact(nameObj)\n      .then((newPerson) => {\n        console.log('added person', newPerson);\n        setPersons(persons.concat(newPerson));\n        displayNotification(`${newPerson.name} added successfully`, true);\n        setNewName('');\n        setNewNumber('');\n    })\n    .catch(error => {\n      console.log(error.response.data);\n      displayNotification(error.response.data.error, false);\n    });\n    \n  }\n\n  //DELETE\n  const deletePerson = (person) => {\n    const agree = window.confirm(`Are you sure you want to delete ${person.name}`);\n\n    if(agree){\n      console.log('delete person', person.id);\n\n      phoneService.deleteContact(person.id)\n      displayNotification(`${person.name} deleted`, true);//notification\n\n\n      //set persons to be all except the one we deleted\n      setPersons(persons.filter((p) => p.id !== person.id));\n    }\n  }\n\n  const displayNotification = (msg, good) => {\n    //is message an error or just a notification\n\n    if (good) {\n      setnotificationMessage(msg);\n      setTimeout(()=>{\n        setnotificationMessage(null);\n      },3000);\n    }else {\n      setErrorMessage(msg);\n      setTimeout(()=>{\n        setErrorMessage(null);\n      },3000);\n    }\n  }\n\n\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={notificationMessage} />\n      <Error message={errorMessage} />\n\n      <Filter handleChange={handleFilterChange} filter={filter}/>\n\n      <h2>Add a new contact</h2>\n      <PersonForm  submitter={addContact}\n       newName={newName} handleNameChange={handleNameChange}\n       newNumber = {newNumber} handleNumberChange= {handleNumberChange}\n      />\n\n      <h2>Numbers</h2>\n      <Persons persons={persons} filter={filter} deletePerson={deletePerson} />\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}